# Schema
type InventoryItem{
    id: Int!
    quantity: String!
    product: Product
}

type Product{
    id: Int!
    name: String!
    price: Float
    description: String
    productCategory: ProductCategory
    properties: [ProductProperty]
}

type ProductCategory{
    id: Int!
    name: String!
}

type ProductProperty{
    id: Int!
    name: String!
    description: String!
    product: Product
}

# Filters

input PropertyFilter {
    name: String
    description: String
}

input ProductFilter {
    name: String
    description: String
    category: String
    priceFrom: Float
    priceTo: Float
    properties: [PropertyFilter]
}

input InventoryItemsFilter {
    quantityFrom: Int
    quantityTo: Int
    productFilter: ProductFilter
}

type Query{
    product(id:Int!): Product
    allProducts(filter: ProductFilter!): [Product]
    allInventoryItems(filter: InventoryItemsFilter!): [InventoryItem]
}

# Mutation
#
#scalar Upload
#
#input ProductInput{
#    id: Int
#    name: String!
#    price: Float
#    description: String
#    productCategory: String
#    properties: [PropertyInput]
#    file:  Upload
#}
#input PropertyInput{
#    id: Int
#    name: String!
#    description: String
#}
#
#type Mutation {
#    createProduct(product: ProductInput):String
#}